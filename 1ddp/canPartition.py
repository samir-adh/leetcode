from typing import List


class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        target = sum(nums)//2
        rem = sum(nums) % 2
        if rem != 0:
            return False
        n = len(nums)
        mem = set()
        for i in range(n):
            num = nums[n-i-1]
            nextmem = mem.copy()
            for subsum in mem:
                if num + subsum == target:
                    return True
                nextmem.add(num+subsum)
        return False

nums
output = Solution().canPartition(nums)
expected = True
print(f"expected {expected}, got : {output}")
